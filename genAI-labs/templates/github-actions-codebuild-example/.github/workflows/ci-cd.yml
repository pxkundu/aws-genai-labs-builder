name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: github-actions-app
  CODEBUILD_PROJECT: github-actions-runner

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/app/requirements.txt
        pip install -r src/tests/requirements.txt
        
    - name: Run tests
      run: |
        cd src
        python -m pytest tests/ -v --cov=app --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./src/coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-deploy:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
    - name: Deploy to AWS using CodeBuild
      run: |
        BUILD_ID=$(aws codebuild start-build \
          --project-name ${{ env.CODEBUILD_PROJECT }} \
          --source-version ${{ github.sha }} \
          --environment-variables-override \
            name=ECR_REGISTRY,value=${{ steps.login-ecr.outputs.registry }} \
            name=ECR_REPOSITORY,value=${{ env.ECR_REPOSITORY }} \
            name=IMAGE_TAG,value=${{ github.sha }} \
            name=GITHUB_TOKEN,value=${{ secrets.GITHUB_TOKEN }} \
            name=GITHUB_REPOSITORY,value=${{ github.repository }} \
            name=GITHUB_REF,value=${{ github.ref }} \
          --query 'build.id' --output text)
        
        echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
        
    - name: Wait for deployment completion
      run: |
        aws codebuild wait build-completed --ids ${{ env.BUILD_ID }}
        
        BUILD_STATUS=$(aws codebuild batch-get-builds \
          --ids ${{ env.BUILD_ID }} \
          --query 'builds[0].buildStatus' --output text)
        
        if [ "$BUILD_STATUS" != "SUCCEEDED" ]; then
          echo "Deployment failed with status: $BUILD_STATUS"
          exit 1
        fi
        
        echo "Deployment completed successfully!"
