# Healthcare ChatGPT Clone - Docker Compose Configuration
# This file defines the local development environment

version: '3.8'

services:
  # OpenWebUI Service
  openwebui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: healthcare-openwebui
    ports:
      - "8080:8080"
    volumes:
      - openwebui_data:/app/backend/data
      - ./frontend/custom:/app/frontend/custom
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - WEBUI_SECRET_KEY=${WEBUI_SECRET_KEY:-your-secret-key-here}
      - DEFAULT_USER_ROLE=user
      - ENABLE_SIGNUP=false
      - ENABLE_OAUTH_SIGNUP=false
      - ENABLE_ADMIN_EXPORT=false
      - ENABLE_ADMIN_CHAT_ACCESS=false
      - ENABLE_ADMIN_USER_MANAGEMENT=false
      - ENABLE_ADMIN_SYSTEM_MONITORING=false
      - ENABLE_ADMIN_MODEL_MANAGEMENT=false
      - ENABLE_ADMIN_SETTINGS=false
      - ENABLE_ADMIN_ANALYTICS=false
      - ENABLE_ADMIN_LOGS=false
      - ENABLE_ADMIN_BACKUP=false
      - ENABLE_ADMIN_RESTORE=false
      - ENABLE_ADMIN_IMPORT=false
      - ENABLE_ADMIN_EXPORT=false
      - ENABLE_ADMIN_CHAT_ACCESS=false
      - ENABLE_ADMIN_USER_MANAGEMENT=false
      - ENABLE_ADMIN_SYSTEM_MONITORING=false
      - ENABLE_ADMIN_MODEL_MANAGEMENT=false
      - ENABLE_ADMIN_SETTINGS=false
      - ENABLE_ADMIN_ANALYTICS=false
      - ENABLE_ADMIN_LOGS=false
      - ENABLE_ADMIN_BACKUP=false
      - ENABLE_ADMIN_RESTORE=false
      - ENABLE_ADMIN_IMPORT=false
    restart: unless-stopped
    depends_on:
      - backend-api
      - postgres
    networks:
      - healthcare-network

  # Backend API Service
  backend-api:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: healthcare-backend-api
    ports:
      - "8000:8000"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-healthcare_chat}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - S3_BUCKET=${S3_BUCKET:-healthcare-knowledge-base-dev}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENVIRONMENT=${ENVIRONMENT:-dev}
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./backend:/app
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    networks:
      - healthcare-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: healthcare-postgres
    environment:
      - POSTGRES_DB=${DB_NAME:-healthcare_chat}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data/fixtures:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - healthcare-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: healthcare-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - healthcare-network

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: healthcare-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - openwebui
      - backend-api
    restart: unless-stopped
    networks:
      - healthcare-network

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: healthcare-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - healthcare-network

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: healthcare-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    networks:
      - healthcare-network

volumes:
  openwebui_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  healthcare-network:
    driver: bridge
